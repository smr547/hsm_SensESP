<?xml version="1.0" encoding="UTF-8"?>
<model version="7.0.1" links="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm7.xsd">
 <documentation>QHsmTst is a contrived state machine from Chapter 2 of the PSiCC2 book for testing all possible transition topologies with up to 4-levels of state nesting.

NOTE: This example uses only the &quot;QEP&quot; component of the QP/C++ framework.</documentation>
 <!--${qpcpp}-->
 <framework name="qpcpp"/>
 <!--${Shared}-->
 <package name="Shared" stereotype="0x02" namespace="APP::">
  <!--${Shared::QHsmTstSignals}-->
  <attribute name="QHsmTstSignals" type="enum" visibility="0x04" properties="0x00">
   <code>{
    A_SIG = QP::Q_USER_SIG,
    B_SIG,
    C_SIG,
    D_SIG,
    E_SIG,
    F_SIG,
    G_SIG,
    H_SIG,
    I_SIG,
    J_SIG,
    TERMINATE_SIG,
    IGNORE_SIG,
    MAX_SIG
};</code>
  </attribute>
  <!--${Shared::the_sm}-->
  <attribute name="the_sm" type="QP::QAsm * const" visibility="0x00" properties="0x00">
   <documentation>opaque pointer to the test SM</documentation>
   <code>= &amp;QHsmTst::inst;</code>
  </attribute>
  <!--${Shared::BSP_display}-->
  <operation name="BSP_display" type="void" visibility="0x00" properties="0x00">
   <!--${Shared::BSP_display::msg}-->
   <parameter name="msg" type="char const *"/>
  </operation>
  <!--${Shared::BSP_terminate}-->
  <operation name="BSP_terminate" type="void" visibility="0x00" properties="0x00">
   <!--${Shared::BSP_terminate::result}-->
   <parameter name="result" type="std::int16_t const"/>
  </operation>
  <!--${Shared::BSP_deepSleep}-->
  <operation name="BSP_deepSleep" type="void" visibility="0x00" properties="0x00"/>
 </package>
 <!--${SMs}-->
 <package name="SMs" stereotype="0x02" namespace="APP::">
  <!--${SMs::QHsmTst}-->
  <class name="QHsmTst" superclass="qpcpp::QHsm">
   <documentation>Test active object</documentation>
   <!--${SMs::QHsmTst::m_foo}-->
   <attribute name="m_foo" type="bool" visibility="0x02" properties="0x00"/>
   <!--${SMs::QHsmTst::inst}-->
   <attribute name="inst" type="QHsmTst" visibility="0x00" properties="0x01"/>
   <!--${SMs::QHsmTst::QHsmTst}-->
   <operation name="QHsmTst" type="" visibility="0x00" properties="0x02">
    <code>  : QHsm(&amp;initial)</code>
   </operation>
   <!--${SMs::QHsmTst::SM}-->
   <statechart properties="0x02">
    <!--${SMs::QHsmTst::SM::initial}-->
    <initial target="../1/6">
     <action>Q_UNUSED_PAR(e);
m_foo = 0U;
BSP_display(&quot;top-INIT;&quot;);

QS_SIG_DICTIONARY(A_SIG, nullptr);
QS_SIG_DICTIONARY(B_SIG, nullptr);
QS_SIG_DICTIONARY(C_SIG, nullptr);
QS_SIG_DICTIONARY(D_SIG, nullptr);
QS_SIG_DICTIONARY(E_SIG, nullptr);
QS_SIG_DICTIONARY(F_SIG, nullptr);
QS_SIG_DICTIONARY(G_SIG, nullptr);
QS_SIG_DICTIONARY(H_SIG, nullptr);
QS_SIG_DICTIONARY(I_SIG, nullptr);
QS_SIG_DICTIONARY(TERMINATE_SIG, nullptr);
QS_SIG_DICTIONARY(IGNORE_SIG, nullptr);</action>
     <initial_glyph conn="76,2,4,1,6,-8">
      <action box="-7,6,5,2"/>
     </initial_glyph>
    </initial>
    <!--${SMs::QHsmTst::SM::s}-->
    <state name="s">
     <entry>BSP_display(&quot;s-ENTRY;&quot;);</entry>
     <exit>BSP_display(&quot;s-EXIT;&quot;);</exit>
     <!--${SMs::QHsmTst::SM::s::initial}-->
     <initial target="../5/7">
      <action>BSP_display(&quot;s-INIT;&quot;);</action>
      <initial_glyph conn="31,7,5,0,-9,18">
       <action box="-6,0,6,2"/>
      </initial_glyph>
     </initial>
     <!--${SMs::QHsmTst::SM::s::I}-->
     <tran trig="I">
      <!--${SMs::QHsmTst::SM::s::I::[m_foo]}-->
      <choice>
       <guard>m_foo</guard>
       <action>m_foo = 0U;
BSP_display(&quot;s-I;&quot;);</action>
       <choice_glyph conn="7,10,5,-1,8">
        <action box="1,0,12,4"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="2,10,3,-1,5">
       <action box="1,-2,6,2"/>
      </tran_glyph>
     </tran>
     <!--${SMs::QHsmTst::SM::s::E}-->
     <tran trig="E" target="../5/7">
      <action>BSP_display(&quot;s-E;&quot;);</action>
      <tran_glyph conn="28,39,2,2,-6">
       <action box="1,-2,6,2"/>
      </tran_glyph>
     </tran>
     <!--${SMs::QHsmTst::SM::s::TERMINATE}-->
     <tran trig="TERMINATE">
      <action>BSP_deepSleep();</action>
      <tran_glyph conn="71,19,1,-1,4,17">
       <action box="0,-2,9,2"/>
      </tran_glyph>
     </tran>
     <!--${SMs::QHsmTst::SM::s::J}-->
     <tran trig="J">
      <action>BSP_display(&quot;s-T; tick()&quot;);</action>
      <tran_glyph conn="2,35,3,-1,9">
       <action box="0,-2,11,3"/>
      </tran_glyph>
     </tran>
     <!--${SMs::QHsmTst::SM::s::s1}-->
     <state name="s1">
      <entry>BSP_display(&quot;s1-ENTRY;&quot;);</entry>
      <exit>BSP_display(&quot;s1-EXIT;&quot;);</exit>
      <!--${SMs::QHsmTst::SM::s::s1::initial}-->
      <initial target="../7">
       <action>BSP_display(&quot;s1-INIT;&quot;);</action>
       <initial_glyph conn="32,19,5,0,-8,6">
        <action box="-4,0,6,2"/>
       </initial_glyph>
      </initial>
      <!--${SMs::QHsmTst::SM::s::s1::I}-->
      <tran trig="I">
       <action>BSP_display(&quot;s1-I;&quot;);</action>
       <tran_glyph conn="13,23,3,-1,6">
        <action box="1,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::QHsmTst::SM::s::s1::D}-->
      <tran trig="D">
       <!--${SMs::QHsmTst::SM::s::s1::D::[!m_foo]}-->
       <choice target="../../..">
        <guard>!m_foo</guard>
        <action>m_foo = true;
BSP_display(&quot;s1-D;&quot;);</action>
        <choice_glyph conn="7,17,4,3,6,-5">
         <action box="-4,2,11,4"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="13,17,3,-1,-6">
        <action box="-2,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::QHsmTst::SM::s::s1::A}-->
      <tran trig="A" target="..">
       <action>BSP_display(&quot;s1-A;&quot;);</action>
       <tran_glyph conn="27,15,0,0,-3,4,3">
        <action box="1,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::QHsmTst::SM::s::s1::B}-->
      <tran trig="B" target="../7">
       <action>BSP_display(&quot;s1-B;&quot;);</action>
       <tran_glyph conn="13,27,3,3,6">
        <action box="1,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::QHsmTst::SM::s::s1::F}-->
      <tran trig="F" target="../../6/4/4">
       <action>BSP_display(&quot;s1-F;&quot;);</action>
       <tran_glyph conn="34,31,1,3,17">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::QHsmTst::SM::s::s1::C}-->
      <tran trig="C" target="../../6">
       <action>BSP_display(&quot;s1-C;&quot;);</action>
       <tran_glyph conn="34,17,1,3,5">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::QHsmTst::SM::s::s1::s11}-->
      <state name="s11">
       <entry>BSP_display(&quot;s11-ENTRY;&quot;);</entry>
       <exit>BSP_display(&quot;s11-EXIT;&quot;);</exit>
       <!--${SMs::QHsmTst::SM::s::s1::s11::H}-->
       <tran trig="H" target="../../..">
        <action>BSP_display(&quot;s11-H;&quot;);</action>
        <tran_glyph conn="24,33,2,2,6">
         <action box="1,0,6,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::QHsmTst::SM::s::s1::s11::D}-->
       <tran trig="D">
        <!--${SMs::QHsmTst::SM::s::s1::s11::D::[m_foo]}-->
        <choice target="../../..">
         <guard>m_foo</guard>
         <action>m_foo = false;
BSP_display(&quot;s11-D;&quot;);</action>
         <choice_glyph conn="7,31,4,3,-6,6">
          <action box="-4,-5,11,4"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="19,31,3,-1,-12">
         <action box="-2,-2,6,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::QHsmTst::SM::s::s1::s11::G}-->
       <tran trig="G" target="../../../6/4/4">
        <action>BSP_display(&quot;s11-G;&quot;);</action>
        <tran_glyph conn="31,27,1,3,20">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="19,25,12,8">
        <entry box="0,3,5,2"/>
        <exit box="0,5,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="13,15,21,21">
       <entry box="0,3,5,2"/>
       <exit box="0,5,5,2"/>
      </state_glyph>
     </state>
     <!--${SMs::QHsmTst::SM::s::s2}-->
     <state name="s2">
      <entry>BSP_display(&quot;s2-ENTRY;&quot;);</entry>
      <exit>BSP_display(&quot;s2-EXIT;&quot;);</exit>
      <!--${SMs::QHsmTst::SM::s::s2::initial}-->
      <initial target="../4/4">
       <action>BSP_display(&quot;s2-INIT;&quot;);</action>
       <initial_glyph conn="65,10,5,0,-8,15">
        <action box="-4,0,6,2"/>
       </initial_glyph>
      </initial>
      <!--${SMs::QHsmTst::SM::s::s2::I}-->
      <tran trig="I">
       <!--${SMs::QHsmTst::SM::s::s2::I::[!m_foo]}-->
       <choice>
        <guard>!m_foo</guard>
        <action>m_foo = true;
BSP_display(&quot;s2-I;&quot;);</action>
        <choice_glyph conn="45,14,5,-1,8">
         <action box="1,0,10,4"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="39,14,3,-1,6">
        <action box="1,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::QHsmTst::SM::s::s2::F}-->
      <tran trig="F" target="../../5/7">
       <action>BSP_display(&quot;s2-F;&quot;);</action>
       <tran_glyph conn="39,24,3,0,-11,1">
        <action box="-3,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::QHsmTst::SM::s::s2::C}-->
      <tran trig="C" target="../../5">
       <action>BSP_display(&quot;s2-C;&quot;);</action>
       <tran_glyph conn="39,19,3,1,-5">
        <action box="-3,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::QHsmTst::SM::s::s2::s21}-->
      <state name="s21">
       <entry>BSP_display(&quot;s21-ENTRY;&quot;);</entry>
       <exit>BSP_display(&quot;s21-EXIT;&quot;);</exit>
       <!--${SMs::QHsmTst::SM::s::s2::s21::initial}-->
       <initial target="../4">
        <action>BSP_display(&quot;s21-INIT;&quot;);</action>
        <initial_glyph conn="64,23,5,0,-4,2">
         <action box="-2,0,5,2"/>
        </initial_glyph>
       </initial>
       <!--${SMs::QHsmTst::SM::s::s2::s21::G}-->
       <tran trig="G" target="../../../5">
        <action>BSP_display(&quot;s21-G;&quot;);</action>
        <tran_glyph conn="45,21,3,1,-11">
         <action box="-3,-2,8,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::QHsmTst::SM::s::s2::s21::A}-->
       <tran trig="A" target="..">
        <action>BSP_display(&quot;s21-A;&quot;);</action>
        <tran_glyph conn="59,19,0,0,-3,4,3">
         <action box="1,-2,6,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::QHsmTst::SM::s::s2::s21::B}-->
       <tran trig="B" target="../4">
        <action>BSP_display(&quot;s21-B;&quot;);</action>
        <tran_glyph conn="66,27,1,1,-4">
         <action box="-2,-2,5,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::QHsmTst::SM::s::s2::s21::s211}-->
       <state name="s211">
        <entry>BSP_display(&quot;s211-ENTRY;&quot;);</entry>
        <exit>BSP_display(&quot;s211-EXIT;&quot;);</exit>
        <!--${SMs::QHsmTst::SM::s::s2::s21::s211::H}-->
        <tran trig="H" target="../../../..">
         <action>BSP_display(&quot;s211-H;&quot;);</action>
         <tran_glyph conn="57,32,2,2,7">
          <action box="1,0,6,2"/>
         </tran_glyph>
        </tran>
        <!--${SMs::QHsmTst::SM::s::s2::s21::s211::D}-->
        <tran trig="D" target="../..">
         <action>BSP_display(&quot;s211-D;&quot;);</action>
         <tran_glyph conn="62,30,1,1,4">
          <action box="0,-2,6,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="51,25,11,7">
         <entry box="0,3,5,2"/>
         <exit box="0,5,5,2"/>
        </state_glyph>
       </state>
       <state_glyph node="45,19,21,15">
        <entry box="0,3,5,2"/>
        <exit box="0,5,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="39,6,29,30">
       <entry box="0,3,5,2"/>
       <exit box="0,5,5,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,2,69,37">
      <entry box="0,3,5,2"/>
      <exit box="0,5,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="143,72"/>
   </statechart>
  </class>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::qhsmtst.hpp}-->
  <file name="qhsmtst.hpp">
   <text>#ifndef QHSMTST_HPP_ 
#define QHSMTST_HPP_

$declare ${Shared}

#endif // QHSMTST_HPP_</text>
  </file>
  <!--${.::qhsmtst.cpp}-->
  <file name="qhsmtst.cpp">
   <text>#include &quot;qpcpp.hpp&quot;     // QP/C++ framework
#include &quot;qhsmtst.hpp&quot;   // QHsmTst state machine

$declare ${SMs::QHsmTst}
$define ${Shared::the_sm}
$define ${SMs::QHsmTst}</text>
  </file>
  <!--${.::main.cpp}-->
  <file name="main.cpp">
   <text>
#include &lt;Arduino.h&gt;

#include &quot;qpcpp.hpp&quot;    // QP/C++ framework
#include &quot;qhsmtst.hpp&quot;  // QHsmTst state machine
#include &quot;esp_sleep.h&quot;
#include &lt;memory&gt;

#include &quot;sensesp.h&quot;
#include &quot;sensesp/sensors/analog_input.h&quot;
#include &quot;sensesp/sensors/digital_input.h&quot;
#include &quot;sensesp/sensors/sensor.h&quot;
#include &quot;sensesp/signalk/signalk_output.h&quot;
#include &quot;sensesp/system/lambda_consumer.h&quot;
#include &quot;sensesp_app_builder.h&quot;

using namespace sensesp;

// The setup function performs one-time application initialization.
void setup() {

    Serial.begin(115200);
    APP::the_sm-&gt;init(0U);  // trigger the initial tran. in the test SM
    Serial.print(&quot;Waiting for input &gt;&gt;&gt; &quot;);


  SetupLogging(ESP_LOG_DEBUG);

  // Construct the global SensESPApp() object
  SensESPAppBuilder builder;
  sensesp_app = (&amp;builder)
                    // Set a custom hostname for the app.
                    -&gt;set_hostname(&quot;my-sensesp-project&quot;)
                    // Optionally, hard-code the WiFi and Signal K server
                    // settings. This is normally not needed.
                    //-&gt;set_wifi_client(&quot;My WiFi SSID&quot;, &quot;my_wifi_password&quot;)
                    //-&gt;set_wifi_access_point(&quot;My AP SSID&quot;, &quot;my_ap_password&quot;)
                    //-&gt;set_sk_server(&quot;192.168.10.3&quot;, 80)
                    -&gt;get_app();

  // GPIO number to use for the analog input
  const uint8_t kAnalogInputPin = 36;
  // Define how often (in milliseconds) new samples are acquired
  const unsigned int kAnalogInputReadInterval = 500;
  // Define the produced value at the maximum input voltage (3.3V).
  // A value of 3.3 gives output equal to the input voltage.
  const float kAnalogInputScale = 3.3;

  // Create a new Analog Input Sensor that reads an analog input pin
  // periodically.
  auto analog_input = std::make_shared&lt;AnalogInput&gt;(
      kAnalogInputPin, kAnalogInputReadInterval, &quot;&quot;, kAnalogInputScale);

  // Add an observer that prints out the current value of the analog input
  // every time it changes.
  analog_input-&gt;attach([analog_input]() {
    debugD(&quot;Analog input value: %f&quot;, analog_input-&gt;get());
  });

  // Set GPIO pin 15 to output and toggle it every 650 ms

  const uint8_t kDigitalOutputPin = 15;
  const unsigned int kDigitalOutputInterval = 650;
  pinMode(kDigitalOutputPin, OUTPUT);
  event_loop()-&gt;onRepeat(kDigitalOutputInterval, [kDigitalOutputPin]() {
    digitalWrite(kDigitalOutputPin, !digitalRead(kDigitalOutputPin));
  });

  // Read GPIO 14 every time it changes

  const uint8_t kDigitalInput1Pin = 14;
  auto digital_input1 = std::make_shared&lt;DigitalInputChange&gt;(
      kDigitalInput1Pin, INPUT_PULLUP, CHANGE);

  // Connect the digital input to a lambda consumer that prints out the
  // value every time it changes.

  // Test this yourself by connecting pin 15 to pin 14 with a jumper wire and
  // see if the value changes!

  auto digital_input1_consumer = std::make_shared&lt;LambdaConsumer&lt;bool&gt;&gt;(
      [](bool input) { debugD(&quot;Digital input value changed: %d&quot;, input); });

  digital_input1-&gt;connect_to(digital_input1_consumer);

  // Create another digital input, this time with RepeatSensor. This approach
  // can be used to connect external sensor library to SensESP!

  const uint8_t kDigitalInput2Pin = 13;
  const unsigned int kDigitalInput2Interval = 1000;

  // Configure the pin. Replace this with your custom library initialization
  // code!
  pinMode(kDigitalInput2Pin, INPUT_PULLUP);

  // Define a new RepeatSensor that reads the pin every 100 ms.
  // Replace the lambda function internals with the input routine of your custom
  // library.

  // Again, test this yourself by connecting pin 15 to pin 13 with a jumper
  // wire and see if the value changes!

  auto digital_input2 = std::make_shared&lt;RepeatSensor&lt;bool&gt;&gt;(
      kDigitalInput2Interval,
      [kDigitalInput2Pin]() { return digitalRead(kDigitalInput2Pin); });

  // Connect the analog input to Signal K output. This will publish the
  // analog input value to the Signal K server every time it changes.
  auto aiv_metadata = std::make_shared&lt;SKMetadata&gt;(&quot;V&quot;, &quot;Analog input voltage&quot;);
  auto aiv_sk_output = std::make_shared&lt;SKOutput&lt;float&gt;&gt;(
      &quot;sensors.analog_input.voltage&quot;,   // Signal K path
      &quot;/Sensors/Analog Input/Voltage&quot;,  // configuration path, used in the
                                        // web UI and for storing the
                                        // configuration
      aiv_metadata
  );

  ConfigItem(aiv_sk_output)
      -&gt;set_title(&quot;Analog Input Voltage SK Output Path&quot;)
      -&gt;set_description(&quot;The SK path to publish the analog input voltage&quot;)
      -&gt;set_sort_order(100);

  analog_input-&gt;connect_to(aiv_sk_output);

  // Connect digital input 2 to Signal K output.
  auto di2_metadata = std::make_shared&lt;SKMetadata&gt;(&quot;&quot;, &quot;Digital input 2 value&quot;);
  auto di2_sk_output = std::make_shared&lt;SKOutput&lt;bool&gt;&gt;(
      &quot;sensors.digital_input2.value&quot;,    // Signal K path
     &quot;/Sensors/Digital Input 2/Value&quot;,  // configuration path
      di2_metadata
  );

  ConfigItem(di2_sk_output)
      -&gt;set_title(&quot;Digital Input 2 SK Output Path&quot;)
      -&gt;set_sort_order(200);

  digital_input2-&gt;connect_to(di2_sk_output);

  // To avoid garbage collecting all shared pointers created in setup(),
  // loop from here.
  while (true) {
    loop();
  }
}

void loop() {

   char rc;

    if (Serial.available() &gt; 0) {
        rc = Serial.read();
        Serial.print(&quot;Read character '&quot;);
        Serial.print(rc);
        Serial.println(&quot;'&quot;);

        QP::QSignal sig = 0U;
        if ('a' &lt;= rc &amp;&amp; rc &lt;= 'j') {  // in range?
            sig = (QP::QSignal)(rc - 'a' + APP::A_SIG);
        } else if ('A' &lt;= rc &amp;&amp; rc &lt;= 'J') {  // in range?
            sig = (QP::QSignal)(rc - 'A' + APP::A_SIG);
        } else if ((rc == 'x') || (rc == 'X')) {  // x or X?
            sig = APP::TERMINATE_SIG;  // terminate the interactive test
        } else {
            sig = APP::IGNORE_SIG;
        }

        QP::QEvt const e(sig);
        APP::the_sm-&gt;dispatch(&amp;e, 0U);  // dispatch the event
    }


 event_loop()-&gt;tick(); 

}


//............................................................................
extern &quot;C&quot; Q_NORETURN Q_onError(char const *const file, int_t const line) {
    // FPRINTF_S(stderr, &quot;Assertion failed in %s, line %d&quot;, file, line);
    Serial.println(&quot;Assertion failed&quot;);
    while (1) {
    }
}

namespace APP {
//............................................................................
void BSP_display(char const *msg) { Serial.println(msg); }
//............................................................................
void BSP_terminate(int16_t const result) {
    Serial.println(&quot;Bye Bye&quot;);
    while (1) {
    }
}

void BSP_deepSleep() {
    Serial.println(&quot;Going to Deep Sleep&quot;);
    esp_deep_sleep_start();
    while (1) {
    }
}

}  // namespace APP






</text>
  </file>
  <!--${.::qp_config.hpp}-->
  <file name="qp_config.hpp">
   <text>//============================================================================
// QP configuration file (generic)
//
// Copyright (C) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                   Q u a n t u m  L e a P s
//                   ------------------------
//                   Modern Embedded Software
//
// SPDX-License-Identifier: GPL-3.0-or-later OR LicenseRef-QL-commercial
//
// The QP/C software is dual-licensed under the terms of the open-source GNU
// General Public License (GPL) or under the terms of one of the closed-
// source Quantum Leaps commercial licenses.
//
// Redistributions in source code must retain this top-level comment block.
// Plagiarizing this software to sidestep the license obligations is illegal.
//
// NOTE:
// The GPL (see &lt;www.gnu.org/licenses/gpl-3.0&gt;) does NOT permit the
// incorporation of the QP/C software into proprietary programs. Please
// contact Quantum Leaps for commercial licensing options, which expressly
// supersede the GPL and are designed explicitly for licensees interested
// in using QP/C in closed-source proprietary applications.
//
// Quantum Leaps contact information:
// &lt;www.state-machine.com/licensing&gt;
// &lt;info@state-machine.com&gt;
//============================================================================
#ifndef QP_CONFIG_HPP_
#define QP_CONFIG_HPP_

//-------- &lt;&lt;&lt; Use Configuration Wizard in Context Menu &gt;&gt;&gt; -----------------

// &lt;o&gt;QP API compatibility version (QP_API_VERSION)
//   &lt;0=&gt;  0   (Maximum compatibility)
//   &lt;691=&gt;691 (QP 6.9.1 or newer)
//   &lt;734=&gt;7.3.4 (QP 7.3.4 or newer)
//   &lt;9999=&gt;9999 (Latest only)
// &lt;i&gt;QP API backwards compatibility with the QP/C API version.
// &lt;i&gt;Lower QP_API_VERSION values enable backwards compatibility
// &lt;i&gt;with lower (older) QP API versions.
// &lt;i&gt;For example, QP_API_VERSION==691 will enable the compatibility
// &lt;i&gt;layer with QP version 6.9.1 and newer, but not older than 6.9.1.
// &lt;i&gt;QP_API_VERSION==0 enables the maximum currently supported
// &lt;i&gt;backwards compatibility. Conversely, QP_API_VERSION==9999 means
// &lt;i&gt;that no backwards compatibility layer should be enabled.
// &lt;i&gt;Default: 0 (All supported)
#define QP_API_VERSION 0

//..........................................................................
// &lt;h&gt;QP Functional Safety (FuSa) Subsystem (Q_UNSAFE)
// &lt;i&gt;The QP FuSa Subsystem consists of the following facilities:
// &lt;i&gt;- Software assertions as a recommended technique
// &lt;i&gt;  (called Failure Assertion Programming (FAP) in IEC 61508)
// &lt;i&gt;- Software Self-Monitoring (SSM), which encompasses such techniques:
// &lt;i&gt;  * Duplicate Inverse Storage for critical variables
// &lt;i&gt;  * Memory Markers for critical objects (e.g., events)
// &lt;i&gt;  * Hard-limits for all loops
// &lt;i&gt;  * Memory Isolation by means of Memory Protection Unit (MPU)

// &lt;c3&gt;Disable QP FuSa in development
// &lt;i&gt;Disable assertions and other self monitoring features
// &lt;i&gt;in development build configurations (NDEBUG undefined).
// &lt;i&gt;VIOLATES functional safety standards. NOT recommended !!!
//#ifndef NDEBUG
//#define Q_UNSAFE
//#endif
// &lt;/c&gt;

// &lt;c3&gt;Disable QP FuSa in production release
// &lt;i&gt;Disable assertions and other self monitoring features
// &lt;i&gt;in the release build configurations (NDEBUG defined).
// &lt;i&gt;VIOLATES functional safety standards. NOT recommended !!!
//#ifdef NDEBUG
//#define Q_UNSAFE
//#endif
// &lt;/c&gt;

// &lt;/h&gt;

//..........................................................................
// &lt;h&gt;QEP Event Processor
// &lt;i&gt;Events and state machines.

// &lt;o&gt;Event signal size (Q_SIGNAL_SIZE)
//   &lt;1U=&gt;1
//   &lt;2U=&gt;2 (default)
//   &lt;4U=&gt;4
// &lt;i&gt;Size of the QEvt signal for QEP/QF [bytes]
// &lt;i&gt;Default: 2
#define Q_SIGNAL_SIZE  2U

// &lt;/h&gt;

//..........................................................................
// &lt;h&gt;QF Framework
// &lt;i&gt;Active Object framework

// &lt;o&gt;Maximum # event pools (QF_MAX_EPOOL)
// &lt;0=&gt;0 no event pools
// &lt;1=&gt;1 &lt;2=&gt;2 &lt;3=&gt;3 (default) &lt;4=&gt;4 &lt;5=&gt;5
// &lt;6=&gt;6 &lt;7=&gt;7 &lt;8=&gt;8 &lt;9=&gt;9 &lt;10=&gt;10 &lt;11=&gt;11
// &lt;12=&gt;12 &lt;13=&gt;13 &lt;14=&gt;14 &lt;15=&gt;15
// &lt;i&gt;Maximum # Event Pools &lt;1..15&gt;
// &lt;i&gt;Default: 3
#define QF_MAX_EPOOL 0U

#define QF_CRIT_STAT
#define QF_CRIT_ENTRY() (static_cast&lt;void&gt;(0))
#define QF_CRIT_EXIT()  (static_cast&lt;void&gt;(0))

#define QF_MEM_SYS()    (static_cast&lt;void&gt;(0))
#define QF_MEM_APP()    (static_cast&lt;void&gt;(0))

// &lt;/h&gt;

//------------- &lt;&lt;&lt; end of configuration section &gt;&gt;&gt; -----------------------

#endif // QP_CONFIG_HPP_</text>
  </file>
 </directory>
</model>
